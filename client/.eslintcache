[{"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/reportWebVitals.js":"1","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/index.js":"2","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/ApolloProvider.js":"3","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/App.js":"4","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/pages/Home.js":"5","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/pages/Login.js":"6","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/pages/Register.js":"7","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/components/MenuBar.js":"8","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/components/PostCard.js":"9","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/util/hooks.js":"10","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/context/auth.js":"11","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/util/authRoute.js":"12","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/util/AuthRoute.js":"13","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/components/PostForm.js":"14","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/util/graphql.js":"15","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/components/LikeButton.js":"16","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/pages/SinglePost.js":"17","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/components/DeleteButton.js":"18"},{"size":362,"mtime":1611440768285,"results":"19","hashOfConfig":"20"},{"size":435,"mtime":1611443230171,"results":"21","hashOfConfig":"20"},{"size":669,"mtime":1611787827785,"results":"22","hashOfConfig":"20"},{"size":934,"mtime":1611874676578,"results":"23","hashOfConfig":"20"},{"size":1347,"mtime":1611870828196,"results":"24","hashOfConfig":"20"},{"size":2593,"mtime":1611785345972,"results":"25","hashOfConfig":"20"},{"size":3529,"mtime":1611785461653,"results":"26","hashOfConfig":"20"},{"size":1601,"mtime":1611785914140,"results":"27","hashOfConfig":"20"},{"size":1796,"mtime":1611874021965,"results":"28","hashOfConfig":"20"},{"size":416,"mtime":1611783716111,"results":"29","hashOfConfig":"20"},{"size":1438,"mtime":1611786314474,"results":"30","hashOfConfig":"20"},{"size":462,"mtime":1611786784727,"results":"31","hashOfConfig":"20"},{"size":462,"mtime":1611786784727,"results":"32","hashOfConfig":"20"},{"size":2241,"mtime":1612216358610,"results":"33","hashOfConfig":"20"},{"size":346,"mtime":1611788442253,"results":"34","hashOfConfig":"20"},{"size":1822,"mtime":1612214772229,"results":"35","hashOfConfig":"20"},{"size":3331,"mtime":1612214068321,"results":"36","hashOfConfig":"20"},{"size":1548,"mtime":1612216833315,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1v51sob",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/reportWebVitals.js",[],["78","79"],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/index.js",[],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/ApolloProvider.js",[],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/App.js",[],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/pages/Home.js",[],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/pages/Login.js",[],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/pages/Register.js",[],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/components/MenuBar.js",[],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/components/PostCard.js",["80","81"],"import React, { useContext } from 'react'\nimport { Card, Icon, Label, Image, Button } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { Link } from 'react-router-dom';\nimport { AuthContext } from '../context/auth';\nimport LikeButton from './LikeButton';\nimport DeleteButton from './DeleteButton';\n\nconst PostCard = ({post: { body, createdAt, id, username, likeCount, commentCount, likes }}) => {\n\n    const { user } = useContext(AuthContext);\n\n    const likePost = () => {\n        console.log('Post Liked')\n    }\n\n    const commentOnPost = () => {\n        console.log('Comment');\n    }\n\n    return (\n        <Card fluid>\n            <Card.Content>\n                <Image\n                floated='right'\n                size='mini'\n                src='https://react.semantic-ui.com/images/avatar/large/molly.png'\n                />\n                <Card.Header>{username}</Card.Header>\n                <Card.Meta as={Link} to={`/posts/${id}`}>{moment(createdAt).fromNow(true)}</Card.Meta>\n                <Card.Description>\n                    {body}\n                </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <LikeButton user={user} post={{id, likes, likeCount}}/>\n                <Button labelPosition='right' as={Link} to={`/posts/${id}`}>\n                    <Button color='teal' basic>\n                        <Icon name='comments' />\n                    </Button>\n                    <Label basic color='blue' pointing='left'>\n                        {commentCount}\n                    </Label>\n                </Button>\n                {user && user.username === username && (\n                    <DeleteButton postId={id}/>\n                )}\n            </Card.Content>\n        </Card>\n    )\n}\n\nexport default PostCard\n","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/util/hooks.js",[],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/context/auth.js",[],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/util/authRoute.js",[],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/util/AuthRoute.js",[],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/components/PostForm.js",[],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/util/graphql.js",[],"/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/components/LikeButton.js",["82"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Icon, Label } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nconst LikeButton = ({user, post: {id, likes, likeCount}}) => {\r\n    const [liked, setLiked] = useState(false);\r\n    const [disableLikeButton, setDisableLikeButton] = useState(false);\r\n\r\n    useEffect(()=> {\r\n        if(user){\r\n            setDisableLikeButton(false);\r\n        } else {\r\n            setDisableLikeButton(true);\r\n        }\r\n\r\n        if(user && likes.find(like => like.username === user.username)){\r\n            setLiked(true);\r\n        } else {\r\n            setLiked(false);\r\n        }\r\n    }, [user, likes])\r\n\r\n    const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n        variables: { postId: id }\r\n    })\r\n\r\n    const likeButton = user ? (\r\n        liked ? (\r\n            <Button color='teal' filled=\"true\">\r\n                <Icon name='heart' />\r\n            </Button>\r\n        ) : (\r\n            <Button color='teal' basic>\r\n                <Icon name='heart' />\r\n            </Button>\r\n        ) \r\n    ) : (\r\n        <Button color='teal' basic>\r\n            <Icon name='heart' />\r\n        </Button>\r\n    )\r\n\r\n    return (\r\n        <Button as='div' labelPosition='right' onClick = {likePost} disabled={disableLikeButton}>\r\n            {likeButton}\r\n            <Label basic color='teal' pointing='left'>\r\n                {likeCount}\r\n            </Label>\r\n        </Button>\r\n    )\r\n}\r\n\r\nconst LIKE_POST_MUTATION = gql`\r\n    mutation likePost($postId: ID!){\r\n        likePost(postId: $postId){\r\n            id\r\n            likes{\r\n                id\r\n                username\r\n            }\r\n            likeCount\r\n        }\r\n    }\r\n`;\r\n\r\nexport default LikeButton\r\n","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/pages/SinglePost.js",["83"],"import React, { useContext } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport moment from 'moment';\r\nimport LikeButton from '../components/LikeButton';\r\nimport DeleteButton from '../components/DeleteButton';\r\nimport { useQuery } from '@apollo/client';\r\nimport { Button, Card, Grid, Icon, Image, Label } from 'semantic-ui-react';\r\nimport {AuthContext} from '../context/auth';\r\n\r\nconst SinglePost = (props) => {\r\n    const postId = props.match.params.postId;\r\n\r\n    const { user } = useContext(AuthContext);\r\n\r\n    const {\r\n        data: { getPost } = {}\r\n      } = useQuery(FETCH_POST_QUERY, {\r\n        variables: {\r\n          postId\r\n        }\r\n      });\r\n\r\n    const deletePostCallback = () => {\r\n        props.history.push('/');\r\n    }\r\n\r\n    let postMarkup;\r\n\r\n    if(!getPost){\r\n        postMarkup = <p>Loading Post...</p>\r\n    } else {\r\n        const { id, body, createdAt, username, comments, likes, likeCount, commentCount } = getPost;\r\n\r\n        postMarkup = (\r\n            <Grid>\r\n                <Grid.Row>\r\n                    <Grid.Column width={2}>\r\n                        <Image \r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png' \r\n                            size=\"small\" \r\n                            float=\"right\"\r\n                        />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={10}>\r\n                        <Card fluid>\r\n                            <Card.Content>\r\n                                <Card.Header>{username}</Card.Header>\r\n                                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\r\n                                <Card.Description>{body}</Card.Description>\r\n                            </Card.Content>\r\n                            <hr/>\r\n                            <Card.Content extra>\r\n                                <LikeButton user={user} post={{ id, likeCount, likes }} />\r\n                                <Button\r\n                                    as=\"div\"\r\n                                    labelPosition=\"right\"\r\n                                    basic\r\n                                    onClick={() => console.log('comment')}\r\n                                >\r\n                                    <Button basic color=\"blue\">\r\n                                        <Icon name=\"comments\" />\r\n                                    </Button>\r\n                                    <Label basic color=\"blue\" pointing=\"left\">{commentCount}</Label>\r\n                                </Button>\r\n                                {user && user.username === username && (\r\n                                    <DeleteButton postId={id} callback={deletePostCallback}/>\r\n                                )}\r\n                            </Card.Content>\r\n                        </Card>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return postMarkup;\r\n};\r\n\r\nconst FETCH_POST_QUERY = gql`\r\n  query($postId: ID!) {\r\n    getPost(postId: $postId) {\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likeCount\r\n      likes {\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default SinglePost;\r\n","/mnt/c/Users/Dom/Desktop/projects/social-media-app/client/src/components/DeleteButton.js",["84"],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":13,"column":11,"nodeType":"91","messageId":"92","endLine":13,"endColumn":19},{"ruleId":"89","severity":1,"message":"93","line":17,"column":11,"nodeType":"91","messageId":"92","endLine":17,"endColumn":24},{"ruleId":"89","severity":1,"message":"94","line":3,"column":10,"nodeType":"91","messageId":"92","endLine":3,"endColumn":14},{"ruleId":"89","severity":1,"message":"95","line":32,"column":48,"nodeType":"91","messageId":"92","endLine":32,"endColumn":56},{"ruleId":null,"fatal":true,"severity":2,"message":"96","line":20,"column":63},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'likePost' is assigned a value but never used.","Identifier","unusedVar","'commentOnPost' is assigned a value but never used.","'Link' is defined but never used.","'comments' is assigned a value but never used.","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 18 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 19 | \u001b[39m            data\u001b[33m.\u001b[39mgetPosts \u001b[33m=\u001b[39m data\u001b[33m.\u001b[39mgetPosts\u001b[33m.\u001b[39mfilter(p \u001b[33m=>\u001b[39m p\u001b[33m.\u001b[39mid \u001b[33m!==\u001b[39m postId)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 20 | \u001b[39m            proxy\u001b[33m.\u001b[39mwriteQuery({ query\u001b[33m:\u001b[39m \u001b[33mFETCH_POSTS_QUERY\u001b[39m\u001b[33m,\u001b[39m data}})\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m                                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 21 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 22 | \u001b[39m            \u001b[36mif\u001b[39m(callback) callback()\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 23 | \u001b[39m        }\u001b[33m,\u001b[39m\u001b[0m","no-global-assign","no-unsafe-negation"]